HW
Client_Server

1) Прочиать про клиент-серверную архитектуру

Веб-приложение - это клиент-серверное приложение, в котором клиентом выступает браузер, а сервером - веб-сервер (в широком смысле).
Веб-сервер обрабатывает полученный запрос от браузера, в соответствии с бизнес-логикой и формирует ответ для пользователя.

Архитектура "клиент-сервер" определяет общие принципы организации взаимодействия в сети, где есть серверы, узлы-поставщики некоторых специальных функций и клиенты.
Реализации такой архитектуры называют клиент-серверными технологиями.

Есть несколько уровней:

1. Двухуровневая - клиент и сервер. Здесь сервер отвечает на клиентские запросы в полном объеме и напрямую.

Клиент - это браузер, (с клиентом работает пользователь, потмоу что он может не быть программистом, ему нужен понятный интерфейс) но встречаются и исключения (например когда один сервер выполняет запрос к другому). Для того, чтобы пользователь увидел графический интерфейс приложения  вокне браузера, последний должен обработать полученный ответ веб-сервера, в котором будет содержаться информация, реализованная, с применением HTML, CSS, JS.

Тестировщик обычно проверяет как раз клиента, но если есть доступ к серверу и БД, проверяем, нет ли там ошибок.

Веб-сервер - это сервер, принимающий HTTP-запросы от клиентов и выдающий им HTTP-ответы. Веб-сервером может быть как ПО, выполняющее функции веб-сервера, так и компьютер, на котором это ПО работает.

База данных - это информационная модель, в которой упорядоченно хранятся данные об объекте или группе объектов. Базы данных функционируют под управление так называемых систем управления базами данных, самые распространенные: MySQL, MS SQL Server, PostgreSQL, Oracle.

В БД лежат данные приложения, к примеру и она обеспечивает их сохранность и позволяет быстро и легко искать по ним.

Трехзвенная архитерктура - сетевое приложение разделено на две и более частей, каждая из них может выполняться на отдельном компьютере. Выделенные части приложения взаимойствуют друг с другом, обмениваясь сообщениями в заранее согласованном формате.

1 звено - клиент -> 2 звено - сервер приложений -> 3 звено сервер БД -> БД.

Трехзвенная мб расширена до многозвенной путем выделения доп. сервером.

Плюсы трехзвенной архитектуры:
- высокая степень гибкости и масштабируемости
- высокая безопасность (защиту можно опрееделить для каждого сервиса или уровня)
- высокая производитеельность (задачи распределены между серверами)

Минус:
упало одно звено - все не работает (сервер упал, тысячи клиентов получают ошибку)

Типы сервисов:
*1 - web-серверы
*2 - серверы приложений
*3 - серверы баз данных 
*4 - файл-серверы
*5 - прокси-сервер
и другие

ИТОГ:
КЛИЕНТ - с ним работает пользователь
СЕРВЕР - тут хранится код
БД - тут лежат данные

КЛИЕНТ - программа, с которой работает пользователь.
СЕРВЕР - компьютер, на котором хранится само приложение, весь код, вся логика.
БД - хранилище данных.
..........................................................

2) Что ткое HTTP и HTTPS

HTTP (HyperText Transfer Protocol) - протокол передачи данных в интернете. С его помощью браузер получает информацию от сервера и показывает пользователю контент.

HTTPS (HyperText Transfer Protocol Secure) - защищенный протокол передачи данных в интернете. Этот тот же протокол HTTP, но защищенный SSL-сертификатом.

Увидеть, каким протоколом пользуется сайт, можно в начале URL-строки.

Чем отличаются между собой HTTP и HTTPS?

- протокол HTTP не обеспечивает защиту предеаваемых данных, любая инфа может быть перехвачена
- работают по разным портам (80 и 443)
- сайты с этими протоколами по-разному отображаются в поисковых сиситемах (поисковые системы обычно сообщают о небезопасности сайта)
- HTTP работает быстрее, но передает открытый текст

HTTP подходит для простых сайтов, типа блогов, а HTTPS для тех, где нужно воодить конфиденциальную инфо-ю.

............................................................

3) HTTP методы

Структура запроса:
1. строка запроса (request line) - в нем указывается метод передачи данных, она обязательна.  * METHOD URI HTTP/VERSION *
2. заголовок (massage header)  - это набор пар имя-значение, разделенных двоеточием.
3. тело сообщения (entity body) - передаваемые данные.

HTTP-метод используется для того, чтоб указать серверу на то, какое действие мы хотим произвести с ресурсом.

ВИДЫ:

-- GET (получение ресурса) запрашивает содержимое ресурса, не влияя на него. Доступен для кеширования данных и добавления в закладки, длина запроса ограничена. Данные в URL визуально доступны всем.
/login-check.php?argument1=value1&argument2=value2 (строка запроса отправляется в URL)

-- POST (создание ресурса) создает новый ресурс из данных, оказывая влияние на содержимое ресурса. Запросы POST не могут быть кешированы и добавляться  в закладки, не ограничивается в объеме. Данные не видны в URL.

При нажатии кнопок "назад/перезагрузка" - данные будут отправлены вновь. Браузер должен предупредить, что произойдет повторная отправка данных.

POST /login-check.php HTTP/1.1
Host: w3docs.com
argument1=value1&argument2=value2 (отправляемые данные содержатся в теле запроса)

-- HEAD запрашивает ресурт, как и GET, но ответ приходит без тела (применяется, чтоб проверить, существует ли ресурс по данному адресу).

-- PUT (обновление ресурса) заменяет текущие представления ресурса данными запроса.

-- DELETE удаляет указанный ресурс

-- OPTIONS описывает параметры коммуникации между клиентом и сервером.

-- CONNECT преобразует соединение запроса в прозрачный туннель.

..........................................................

4) HTTP статус коды сервера

Код ответа показывает , был ли успешно выполнен определенный HTTP/
Есть 5 классов:
1 - Информационные 100-199 (information)
2 - Успешные 200-299 (success)
3 - Перенаправления 300-399 (redirect)
4 - Клиентские ошибки 400-499 (client error)
5 - Серверные ошибки 500-599 (server error)

..........................................................

5) Что такое ядро браузера 

Браузерный движок - программа, которая преобразует содержимое веб-страниц (файлы HTML, XML, цифровые изображения) и информацию о форматировании (CSS, XSL) в интерактивное изображение форматированного содержимого на экране. Обычно используется в веб-браузерах. 

...........................................................

6) Какие браузеры какиие ядра используют

- Trident (для программ Microsoft IE)
- Blink (Google Chrome)
- Gecko (Mozilla, Firefox)
- KHTML (Konqueror)
- WebKit (Apple Safari)
- Presto (Opera Software)

............................................................

7) Что такое API

API (Application Programming Interface) - специальный протокол для взаимодействия программ, который позволяет использовать функции одного приложения внутри другого.
Пример из моей работы - есть сайт ТО, они создали АПИ, с помощью которого мы берем данные с их сайта и загружаем на наш сайт поиска и бронирования туров.
Другой пример - быстрая регистрация с помощью аккаунта в соцсетях (используется АПИ социальной сети) / оплата через API платежной системы

API представляет собой набор функций (операция, данные на входе, данные на выходе).

Пользователи работают с GUI, программы - с API

Как вызвать API?
1 - Система вызывает функции внутри себя
2 - СИстема вызывает метод другой системы
3 - Человек вызывает метод
4 - Автотесты дергают методы
5 - Пользователь работает с GUI

Как мы вызывали API: через программу WinSCP заходили в логи, находили нужный нам запрос по времени и ID, копировали оттуда ссылку запроса, и открывали в браузере со включенным прокси.

Не всегда программа предоставляет именно графический интерфейс, это мб SOAP, REST интерфейс.

SOAP (Simple Object Acces Protocol) - клиент и сервер обмениваются сообщениями посредством XML. Это менее гибкий АПИ, использовался ранее.

REST (Representation State Transfer) - определяет набор функций, таких как GET, PUT, DELETE, которые клиенты могут использовать для доступа к данным сервера.

Операторы предоставляли нам REST интерфейс.
  
...........................................................

8. Что такое ендпоинты

Эндпоинт - (конечная точка)  - это некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом.  Простыми словами - это адрес, на который отправляются сообщения.

................................................................

9) URL (URI, URL, URN)

URI (Uniform Resource Identifier) - это строка символов, которая используется для идентификации ресурса по его адресу или по его имени, либо по тому и тому вместе.

URL (Uniform Resource Locator) - это строка символов, которая используется для идентификации ресурса, но только по его адресу. (чаще используется для поиска на сервере)

URN (Uniform Resource Name) - строка символок, которая используется для идентификации ресурса, но только по его имени.

Любой URL состоит из нескольких компонентов: протокол (https), хост (www.mysite.com), порт (80), URL-путь (catalog/product), параметры запроса (id=15&color=yellow), якорь (#price). 
Обязательными являются протокол и хост

.................................................................

10) Идемпотентные HTTP методы

Идемпотентный метод - является таковым, если повторный идентичный запрос , сделанный один или несколько раз подряд, имеет один  и тот же эффект, не изменяющий состояние сервера. Он не должен иметь побочных эффектов. 
Это методы GET, HEAD, PUT, DELETE. Все эти методы безопасные.

.................................................................

11) Безопасные HTTP методы

Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only). Несколько следующих методов HTTP безопасные: GET , HEAD или OPTIONS . 

...................................................................

12) Иденфикация, Аутентификация, Авторизация

Все процессы идут один за другим

1 - Идентификация - процесс распознавания пользователя по его идентификатору. (Это мб логин, имя и фамилия, адрес эл. почты или номер мобильного) - после введения данных система находит в своей БД, есть ли такая информация. Если есть, идентификация завершается.

2 - Аутентификация - процедура проверки подлинности, доказательство, что пользователь имено тот, за кого себя выдает. (мб отпечатки пальцев, сканер лица, пин-код, секретные слова)

3 - Авторизация - предоставление определенных прав. (если все верно, логин и пароль верны, система предоставляет доступ)

..........................................................................

13) Что такое IP

IP-адрес (Internet Protocol) - уникальный идентификатор устройства в интернете или локальной сети.
Что-то типа адреса на карте (страна, область, город, улица, дом).
Он содержит в себе информацию о местоположении устройства и обеспечивает его доступность для связи.

Есть два основных типа:

--четвертая версия интернет-протокола IPv4 (представляет 32-разрядные числа, например 192.0.2.53)
--новая IPv6 (128-битные чиса, например 2001: 0db8: 582: ae33 :: 29.)

IP-адрес мб частным и публичным.

Как узнать внутренний айпи-адрес? В командной строке ввести ipconfig

.........................................................................

14) Что такое октеты в DNS

DNS-сервер обеспечивает хранение и администрирование данных в иерархической структуре (специализированный компьютер, который хранит IP-адреса сайтов).  В его задачи входит передача сведений о доменном имени.

Когда пользователь вводит  вадресной строке браузера имя сайта, например google.com, компьютер запрашивает IP-адрес этого сайта на специальном DNS-сервере и после получения корректного ответа открывает сам сайт.

Структура пакета DNS:

1-Header - заголовок DNS, состоящий из 12 октет.
2-Question section
3-Answer section
4-Authoritative Section
5-Additionl Record Section

*Есть единица измерения информации - 1 бит, октет - это 8 бит, именно поэтому такое название. В структуре DNS-запроса находится 12 октетов, так удобнее считать, потому что 1 октет можно выразить двумя шестнадцатеричными числами, например 8 единиц - это просто ff, делится октетами исключительно для удобства.

..............................................................................

15) Что такое порт, сколько портов у Linux сервера

Порт - это число, указываемое при запросе на соединение.

Примеры:
80 http - просмотр веб-страниц
443 https - шифрованный протокол просмотра веб-страниц
110 pop3, 995 pop3s, 25 smtp 22 ssh и другие

Есть порт, НА который устанавливается соединение и есть порт, С которого устанавливается соединение. (все примеры это НА, а С формируется тогда, когда в момент установки соединения генерируется какое-то случайное число)

Для определения того, какая именно программа слушает конкретный порт в данный момент, существуют специальные утилиты - Netstat, ss, Nmap, Isof.

...............................................................................

16) Уровни OSI

Модель OSI (Open System Interconnection) - характеризует взаимодействие сетевого оборудования. То есть посредством нее общаются такие устройства, как ПК с сетевыми картами, роутерами (преобразование битов информации в сигналы).

1-Физический (Physical) - передача информации, сигналы уходят от отправителя к получателю. (через кабель например)

2-Канальный (Data Link) -  получает с физического бит, находит начало и конец сообщения и упаковывает биты в кадр, затем происходит обнаружение и коррекция ошибок. (устройства - мосты и коммутаторы)

3-Сетевой (Network) - осуществляется маршрутизация -определение маршрута пересылки пакетов через промежуточные узлы.  Когда пользователь желает перейти на сайт и вводит его адрес, отправляется DNS-запрос, ответом на него будет IP-адрес, который подставляется в пакет. (устройства - роутер или маршрутизатор)

4-Транспортный (Transport) - протоколы этого уровня следят за доставкой пакетов, нумеруют пакеты и расставляют их в нужном порядке после получения. Потому что протоколы сетевого не гарантируют доставку пакета.

5-Сеансовый (Session) - организовует связь между приложениями на компьютерах, отвечает за создание и окончание сеанса, обмен данными и др. процессы.

6-Представления (Presentation) - преобразование форматов данных, например, сжатие и кодирование.

7-Прикладной (Application) - описывает взаимосвязь приложений на ПК и внешней сети.  Сюда относятся протоколы для просмотра страниц в интернете (HTTP, HTTPS).

.................................................................................

17) Хедеры http запросов

Хедеры - это строки в HTTP-сообщении, содержащие пару имя-значение.
Заголовки являются основной частью HTTP-запросов и ответов и несу информацию о браузере клиента, запрошенной странице и многом другом.

Разделяются на:

--General Headers (Основные заголовки) - должны быть в запросах и ответах клиента и сервера
--Request Headers (Заголовки запроса) - используются только в запросах клиента
--Response Headers (Заголовки ответа) - используются только в ответах сервера
--Entity Headers (Заголовки сущности) - сопровождают каждую сущность сообщения.

Правила их написания:
1. Регистр не учитывается
2. После параметра должно быть двоеточие :
3. Пишутся латинскими буквами
4. Окончанием пары "параметр: значение" служит символ переноса строки